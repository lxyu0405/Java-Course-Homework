/*
 * ServerFrame.java
 *
 * Created on __DATE__, __TIME__
 */

package _AHomework;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;

/**
 *
 * @author  __USER__
 */
public class ServerFrame extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/** Creates new form ServerFrame */
	public ServerFrame() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jSeparator1 = new javax.swing.JSeparator();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Server_lxyu");
		setResizable(false);

		jLabel1.setText("MESSAGES");

		jTextArea1.setColumns(20);
		jTextArea1.setEditable(false);
		jTextArea1.setRows(5);
		jScrollPane2.setViewportView(jTextArea1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jScrollPane2,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														565,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														jSeparator1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														573, Short.MAX_VALUE)
												.addComponent(jLabel1))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addComponent(jLabel1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jSeparator1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										10,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane2,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										461, Short.MAX_VALUE).addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public void Server() {
		try {
			ServerSocket serverSocket = new ServerSocket(8000);
			jTextArea1.append("MultiThreadServer started at " + new Date()
					+ "\n");
			int clientNO = 1;
			while (true) {
				//Listen for a new connection request
				Socket socket = serverSocket.accept();
				jTextArea1.append("Get a request...handling...\n");
				//show the client number
				jTextArea1.append("Starting thread for client " + clientNO
						+ " at " + new Date() + "\n");
				InetAddress inetAddress = socket.getInetAddress();
				jTextArea1.append("Client " + clientNO + "'s host name is "
						+ inetAddress.getHostName() + "\n");
				jTextArea1.append("Client " + clientNO + "'s IP Address is "
						+ inetAddress.getHostAddress() + "\n");
				HandleAClient task = new HandleAClient(socket);
				jTextArea1.append("Starting a thread to serve this request...\n");
				threadQueue.add(task);
				new Thread(task).start();
				clientNO++;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	//inner class
	class HandleAClient implements Runnable {
		private Socket socket;

		public HandleAClient(Socket socket) {
			this.socket = socket;
			jTextArea1.append("Initializing socket...\n");
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			jTextArea1.append("Begin to read message...\n");
			try {
				DataInputStream inputFromClient = new DataInputStream(
						socket.getInputStream());
				while (true) {
					String msg = inputFromClient.readUTF();
					System.out.println(msg);
					jTextArea1.append(msg + "\n");
					synchronized(threadQueue){
						for(int i = 0;i < threadQueue.size();i++){
							HandleAClient temp = threadQueue.get(i);
							DataOutputStream outputToClient = new DataOutputStream(
									temp.socket.getOutputStream());
							outputToClient.writeUTF(msg);
						}
					}
					//synchronized(msgPool){
					//	msgPool.add(msg);
					//	int newSize = msgPool.size();
					//}
				}
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}

	}

	public static void main(String args[]) {
		ServerFrame server = new ServerFrame();
		server.setVisible(true);
		server.setLocationRelativeTo(null);
		server.Server();
		server.addWindowListener(new WindowAdapter(){  
	        public void windowClosing(WindowEvent e) {  
	            System.exit(0);  
        }});
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JTextArea jTextArea1;
	// End of variables declaration//GEN-END:variables
	private ArrayList<HandleAClient> threadQueue = new ArrayList<HandleAClient>();
}